import httpx
import logging
import time
from config import MIDJOURNEY_API_TOKEN

logger = logging.getLogger(__name__)

class MidjourneyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Kolersky Midjourney (v1)."""

    BASE_URL = "https://api.kolersky.com/v1/midjourney"
    STATUS_URL = "https://api.kolersky.com/v1/status"

    def __init__(self):
        if not MIDJOURNEY_API_TOKEN:
            raise ValueError("MIDJOURNEY_API_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py.")
        self.headers = {"Authorization": f"Bearer {MIDJOURNEY_API_TOKEN}"}
        self.client = httpx.Client(headers=self.headers, timeout=30)

    def create_imagine_task(self, prompt: str, aspect_ratio: str = "1:1", speed: str = "relaxed") -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (text-to-image)."""
        url = f"{self.BASE_URL}/generate"
        payload = {
            "taskType": "text-to-image",
            "prompt": prompt,
            "aspectRatio": aspect_ratio,
            "speed": speed
        }
        response = self.client.post(url, json=payload)
        response.raise_for_status()
        return response.json()

    def upload_image(self, image_path: str, extension: str = None) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CDN URL.

        Args:
            image_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (png, jpg, jpeg, webp). –ï—Å–ª–∏ None, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        Returns:
            URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ CDN
        """
        import base64
        import os

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if extension is None:
            extension = os.path.splitext(image_path)[1].lstrip('.').lower()
            if extension == 'jpg':
                extension = 'jpeg'

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        with open(image_path, 'rb') as f:
            image_data = base64.b64encode(f.read()).decode('utf-8')

        url = f"{self.BASE_URL}/image/upload"
        payload = {
            "image": image_data,
            "extension": extension
        }

        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {extension})...")
        response = self.client.post(url, json=payload)
        response.raise_for_status()
        result = response.json()

        if "url" not in result:
            raise ValueError(f"URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ: {result}")

        cdn_url = result["url"]
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {cdn_url}")
        return cdn_url

    def create_image_to_image_task(self, file_url: str, prompt: str, aspect_ratio: str = "16:9") -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ image-to-image (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
        url = f"{self.BASE_URL}/generate"
        payload = {
            "taskType": "image-to-image",
            "prompt": prompt,
            "fileUrl": file_url,
            "aspectRatio": aspect_ratio
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ image-to-image: {payload}")
        response = self.client.post(url, json=payload)
        response.raise_for_status()
        result = response.json()
        logger.info(f"–û—Ç–≤–µ—Ç API –Ω–∞ image-to-image: {result}")
        return result

    def create_video_task(self, file_url: str, prompt: str = "", motion: str = "high",
                         video_batch_size: int = 1, task_type: str = "image-to-video") -> dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            file_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
            prompt: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º
            motion: –£—Ä–æ–≤–µ–Ω—å –¥–≤–∏–∂–µ–Ω–∏—è "low" –∏–ª–∏ "high" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "high")
            video_batch_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 1, 2 –∏–ª–∏ 4 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ "image-to-video" –∏–ª–∏ "image-to-video-hd"
        """
        url = f"{self.BASE_URL}/generate"
        payload = {
            "taskType": task_type,
            "fileUrl": file_url,
            "motion": motion,
            "videoBatchSize": video_batch_size
        }
        if prompt:
            payload["prompt"] = prompt

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {payload}")
        response = self.client.post(url, json=payload)
        response.raise_for_status()
        result = response.json()
        logger.info(f"–û—Ç–≤–µ—Ç API –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {result}")
        return result

    def get_task_status(self, request_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."""
        url = f"{self.STATUS_URL}?requestId={request_id}"
        response = self.client.get(url)
        response.raise_for_status()
        return response.json()

    def wait_for_task_completion(self, request_id: str, timeout: int = 300) -> dict:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        start_time = time.time()
        while time.time() - start_time < timeout:
            result = self.get_task_status(request_id)
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            status = result.get("status")
            if status == "success":
                return result
            elif status == "error":
                # failReason –º–æ–∂–µ—Ç –±—ã—Ç—å: –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –≤ output, –∏–ª–∏ –≤ data.output
                fail_reason = (
                    result.get("failReason") or
                    result.get("output", {}).get("failReason") or
                    result.get("data", {}).get("output", {}).get("failReason", "Unknown error")
                )
                logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API —Å –æ—à–∏–±–∫–æ–π: {result}")
                raise Exception(f"–ó–∞–¥–∞—á–∞ {request_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {fail_reason}")
            time.sleep(5)
        raise TimeoutError(f"–ó–∞–¥–∞—á–∞ {request_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥.")

    def execute_with_retry(self, task_func, task_name: str, max_retries: int = 2, retry_delay: int = 300):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.

        Args:
            task_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å request_id)
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2: –ø–µ—Ä–≤–∞—è + 1 –ø–æ–≤—Ç–æ—Ä)
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω—É—Ç)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

        Raises:
            Exception: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        """
        for attempt in range(1, max_retries + 1):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –¥–ª—è –∑–∞–¥–∞—á–∏: {task_name}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                task_result = task_func()

                if "requestId" not in task_result:
                    logger.error(f"–ö–ª—é—á 'requestId' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ: {task_result}")
                    raise KeyError("–ö–ª—é—á 'requestId' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ.")

                request_id = task_result["requestId"]
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_name} (requestId: {request_id})...")

                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                result = self.wait_for_task_completion(request_id)
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return result

            except Exception as e:
                error_message = str(e)
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_message}")

                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                if attempt >= max_retries:
                    logger.error(f"üõë –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ ({max_retries}) –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –∑–∞–¥–∞—á–∏: {task_name}")
                    raise

                # –ò–Ω–∞—á–µ –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É...")
