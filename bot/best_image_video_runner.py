import os
import asyncio
import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from telethon import TelegramClient
from telethon.tl.types import MessageMediaPhoto
from aiogram import Bot
from aiogram.types import FSInputFile
from config import TELETHON_API_ID, TELETHON_API_HASH, TELETHON_PEER, TELEGRAM_TOKEN, TARGET_CHAT_ID
from services.midjourney_service import MidjourneyService
from utils.image_utils import create_image_path, create_video_path, download_video
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def get_most_popular_image():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram-–≥—Ä—É–ø–ø–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π.
    """
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Telethon –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,
    # –∑–∞—Ç–µ–º —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    session_file = '/home/user/UtrIskra/best_image_session'
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}.session")
    logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(session_file + '.session')}")
    client = TelegramClient(session_file, TELETHON_API_ID, TELETHON_API_HASH)

    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # –ó–∞—Ç–µ–º —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª best_image_session.session
        await client.start()
        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç/–≥—Ä—É–ø–ø—É (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID)
        peer_id = int(TELETHON_PEER) if TELETHON_PEER.lstrip('-').isdigit() else TELETHON_PEER
        entity = await client.get_entity(peer_id)
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ: {entity.title if hasattr(entity, 'title') else TELETHON_PEER}")

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
        week_ago = datetime.datetime.now() - datetime.timedelta(days=7)
        logger.info(f"–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å {week_ago.strftime('%Y-%m-%d %H:%M:%S')}")

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –∏ –∏—Ö —Ä–µ–∞–∫—Ü–∏—è–º–∏
        images_with_reactions = []

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        async for message in client.iter_messages(entity, offset_date=week_ago, limit=None):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ
            if message.media and isinstance(message.media, MessageMediaPhoto):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                reactions_count = 0
                if message.reactions:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
                    for reaction in message.reactions.results:
                        reactions_count += reaction.count

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                images_with_reactions.append({
                    'message_id': message.id,
                    'date': message.date,
                    'reactions_count': reactions_count,
                    'message': message
                })

                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ID {message.id}, "
                    f"–î–∞—Ç–∞: {message.date.strftime('%Y-%m-%d %H:%M')}, "
                    f"–†–µ–∞–∫—Ü–∏–π: {reactions_count}"
                )

        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images_with_reactions)}")

        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π
        if not images_with_reactions:
            logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
            return None

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–∫—Ü–∏–π
        best_image = max(images_with_reactions, key=lambda x: x['reactions_count'])

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–π –≤–æ–æ–±—â–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if best_image['reactions_count'] == 0:
            logger.info("–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç 0 —Ä–µ–∞–∫—Ü–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
            return None

        logger.info(
            f"\n–°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n"
            f"  ID: {best_image['message_id']}\n"
            f"  –î–∞—Ç–∞: {best_image['date'].strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"  –†–µ–∞–∫—Ü–∏–π: {best_image['reactions_count']}"
        )

        return best_image

    finally:
        await client.disconnect()
        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


async def send_best_image_video_story():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–∂–∏–≤–ª—è–µ—Ç –µ–≥–æ.
    –ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELETHON_API_ID or not TELETHON_API_HASH:
        logger.error(
            "\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELETHON_API_ID –∏ TELETHON_API_HASH\n"
            "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API ID –∏ Hash:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org/auth\n"
            "2. –í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'\n"
            "4. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ API ID –∏ API Hash\n"
            "5. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env:\n"
            "   TELETHON_API_ID=–≤–∞—à_api_id\n"
            "   TELETHON_API_HASH=–≤–∞—à_api_hash\n"
        )
        return

    bot = Bot(token=TELEGRAM_TOKEN)

    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        best_image = await get_most_popular_image()

        if best_image is None:
            logger.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–≤–ª–µ–Ω–∏–∏
        message_text = (
            f"üé¨ –û–∂–∏–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {best_image['message_id']}\n"
            f"‚Ä¢ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {best_image['date'].strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π: {best_image['reactions_count']}\n\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(chat_id=TARGET_CHAT_ID, text=message_text)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram
        logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        image_path = create_image_path(prefix="best_image")

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telethon –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        session_file = '/home/user/UtrIskra/best_image_session'
        client = TelegramClient(session_file, TELETHON_API_ID, TELETHON_API_HASH)
        await client.start()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
            peer_id = int(TELETHON_PEER) if TELETHON_PEER.lstrip('-').isdigit() else TELETHON_PEER
            message = await client.get_messages(peer_id, ids=best_image['message_id'])

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await client.download_media(message, file=image_path)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {image_path}")
        finally:
            await client.disconnect()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É...")
        sent_photo = await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=FSInputFile(image_path))
        logger.info("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ catbox.moe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ catbox.moe...")
        import requests
        with open(image_path, 'rb') as f:
            upload_response = requests.post(
                'https://catbox.moe/user/api.php',
                data={'reqtype': 'fileupload'},
                files={'fileToUpload': f}
            )
        upload_response.raise_for_status()
        image_url = upload_response.text.strip()
        logger.info(f"–ü—É–±–ª–∏—á–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Midjourney
        midjourney_service = MidjourneyService()

        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Midjourney —á–µ—Ä–µ–∑ image-to-image —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Midjourney (image-to-image)...")

        # –°–æ–∑–¥–∞–µ–º image-to-image —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
        image_result = midjourney_service.execute_with_retry(
            task_func=lambda: midjourney_service.create_image_to_image_task(
                file_url=image_url,
                prompt="high quality, detailed",
                aspect_ratio="16:9"
            ),
            task_name="image-to-image",
            max_retries=2,
            retry_delay=300  # 5 –º–∏–Ω—É—Ç
        )

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        video_result = midjourney_service.execute_with_retry(
            task_func=lambda: midjourney_service.create_video_task(
                file_url=image_url,
                prompt="gentle movement, cinematic camera motion",
                motion="high",
                video_batch_size=1,
                task_type="image-to-video"
            ),
            task_name="image-to-video",
            max_retries=2,
            retry_delay=300  # 5 –º–∏–Ω—É—Ç
        )

        # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
        video_urls = video_result.get("data", {}).get("output", {}).get("video_urls", [])
        if not video_urls:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {video_result}")

        video_url = video_urls[0]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω URL –≤–∏–¥–µ–æ: {video_url}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path = create_video_path(prefix="best_image_video")
        logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
        download_video(video_url, video_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram...")
        await bot.send_video(chat_id=TARGET_CHAT_ID, video=FSInputFile(video_path))
        logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(send_best_image_video_story())
