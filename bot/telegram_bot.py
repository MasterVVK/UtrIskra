from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN, TARGET_CHAT_ID
from services.gemini_service import GeminiService
from services.stability_service import StabilityService
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class StoryBot:
    """–ö–ª–∞—Å—Å –¥–ª—è Telegram-–±–æ—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å—Ç–æ—Ä–∏—Å."""

    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.gemini_service = GeminiService()
        self.stability_service = StabilityService()

    async def publish_story(self, topic: str = "—Ü–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ"):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–æ—Ä–∏—Å –≤ Telegram-–≥—Ä—É–ø–ø–µ.
        :param topic: –¢–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini Pro...")
            prompt = self.gemini_service.generate_prompt(
                system_prompt="–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                user_prompt=f"–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É '{topic}'."
            )

            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")

            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stability AI...")
            image_content = await self.stability_service.generate_image(prompt)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = "story.png"
            with open(image_path, "wb") as file:
                file.write(image_content)

            logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–æ—Ä–∏—Å –≤ Telegram...")
            await self.bot.send_photo(
                chat_id=TARGET_CHAT_ID,
                photo=FSInputFile(image_path),
                caption=f"–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ç–µ–º—É: {topic} üåü"
            )

            logger.info("–°—Ç–æ—Ä–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–æ—Ä–∏—Å: {e}")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.help_command, Command("help"))
        self.dp.message.register(self.generate_story_command, Command("generate"))

    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–æ—Ä–∏—Å.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/generate <—Ç–µ–º–∞> - –°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–∏—Å.\n"
            "/help - –ü–æ–º–æ—â—å."
        )

    async def help_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await message.answer(
            "–Ø –ø—É–±–ª–∏–∫—É—é —Å—Ç–æ—Ä–∏—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Stability AI –∏ Gemini Pro.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/generate <—Ç–µ–º–∞> - –°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–∏—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É.\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."
        )

    async def generate_story_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate.
        –§–æ—Ä–º–∞—Ç: /generate <—Ç–µ–º–∞>
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(maxsplit=1)
        topic = command_parts[1] if len(command_parts) > 1 else None

        if not topic:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate —Ü–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ")
            return

        await message.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ—Ä–∏—Å –Ω–∞ —Ç–µ–º—É: {topic}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        await self.publish_story(topic)
        await message.answer("–°—Ç–æ—Ä–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        self.register_handlers()
        await self.dp.start_polling(self.bot)


# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    story_bot = StoryBot()
    asyncio.run(story_bot.start())
