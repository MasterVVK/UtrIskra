import asyncio
import datetime
import os
import base64
import time
import requests
import logging
import json
from config import TELEGRAM_TOKEN, TARGET_CHAT_ID, IMAGES_PATH, FOLDER_ID, OAUTH_TOKEN
from aiogram import Bot
from aiogram.types import FSInputFile
from utils.database import initialize_database, save_to_database

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)

def update_iam_token():
    """
    Обновляет IAM-токен для Yandex Cloud.
    """
    try:
        url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
        headers = {"Content-Type": "application/json"}
        data = {"yandexPassportOauthToken": OAUTH_TOKEN}

        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        iam_token = response.json().get("iamToken")

        # Сохраняем IAM-токен в файл
        token_path = "generated/iam_token.json"
        os.makedirs(os.path.dirname(token_path), exist_ok=True)
        with open(token_path, "w") as f:
            json.dump({"iam_token": iam_token}, f)

        logger.info("IAM-токен успешно обновлен")
        return iam_token
    except Exception as e:
        logger.error(f"Ошибка при обновлении IAM-токена: {e}")
        return None

def get_iam_token():
    """
    Получает текущий IAM-токен из файла или обновляет его.
    """
    token_path = "generated/iam_token.json"
    try:
        if os.path.exists(token_path):
            with open(token_path, "r") as f:
                data = json.load(f)
                return data.get("iam_token")
        else:
            return update_iam_token()
    except Exception as e:
        logger.error(f"Ошибка при получении IAM-токена: {e}")
        return update_iam_token()

def generate_image(text):
    """
    Генерирует изображение через Yandex-Art API.
    """
    IAM_TOKEN = get_iam_token()
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
    headers = {
        "Authorization": f"Bearer {IAM_TOKEN}",
        "X-Folder-Id": FOLDER_ID
    }
    data = {
        "modelUri": f"art://{FOLDER_ID}/yandex-art/latest",
        "generationOptions": {
            "seed": "1863",
            "aspectRatio": {"widthRatio": "2", "heightRatio": "1"}
        },
        "messages": [{"weight": "1", "text": text}]
    }

    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    request_id = response.json().get("id")

    logger.info("Ожидание завершения генерации изображения...")
    time.sleep(10)

    result_url = f"https://llm.api.cloud.yandex.net:443/operations/{request_id}"
    result_response = requests.get(result_url, headers=headers)
    result_response.raise_for_status()
    image_base64 = result_response.json().get("response").get("image")

    image_path = os.path.join(IMAGES_PATH, "generated_image.jpeg")
    os.makedirs(IMAGES_PATH, exist_ok=True)
    with open(image_path, "wb") as f:
        f.write(base64.b64decode(image_base64))

    logger.info(f"Изображение сохранено в {image_path}")
    return image_path

async def send_daily_story():
    """
    Генерирует и отправляет изображение через Yandex-Art в Telegram-группу.
    """
    try:
        prompt = (
            f"Today is {datetime.datetime.now().strftime('%d %B %Y')}.\n"
            "Create a beautiful artistic image with Yandex-Art. The theme is nature, harmony, and creativity."
        )
        logger.info(f"Генерация изображения через Yandex-Art с текстом: {prompt}")
        image_path = generate_image(prompt)

        logger.info("Отправка изображения в Telegram-группу...")
        await bot.send_photo(
            chat_id=TARGET_CHAT_ID,
            photo=FSInputFile(image_path),
            caption=f"Generated by Yandex-Art: {prompt}"
        )
        logger.info("Изображение успешно отправлено!")

        save_to_database(
            date=datetime.datetime.now().strftime("%Y-%m-%d"),
            system_prompt="Generate artistic image with Yandex-Art.",
            user_prompt=prompt,
            generated_prompt="Yandex-Art output",
            image_path=image_path
        )
    except Exception as e:
        logger.error(f"Ошибка: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    initialize_database()
    asyncio.run(send_daily_story())
